input:
  label: ""
  mqtt:
    urls: [tcp://192.168.0.1:1883]
    client_id: "smtp"
    connect_timeout: 30s
    topics: [test/new/someValue]
    auto_replay_nacks: true
pipeline:
  processors:
    - bloblang: |
        root = {
          "mqtt_topic": meta("mqtt_topic"), 
          "timestamp_ms": (timestamp_unix_nano() / 1000000).floor(),
          "value": this.number()
        }
    - branch:
        request_map: |
          root = {}
        processors:
          - try:
              - cache:
                  operator: get
                  resource: trigger
                  key: 'trigger_set'
        result_map: 'root.trigger_set = content().string()'

    - bloblang: |
        root.value = this.value

        if this.value > 50 && this.trigger_set == "false" {
          root.msg = "error, high level in " + this.mqtt_topic.string() + ": " + this.value.string()
          root.subject = "test alarm"
          root.send_email = "true"
          root.set_trigger = "true"
        } else if this.value < 10 {
          root.send_email = "false"
          root.set_trigger = "false"
        } else {
          root.send_email = "false"
          root.set_trigger = this.trigger_set
        }

    - cache:
        operator: set
        resource: trigger
        key: 'trigger_set'
        value: '${! json("set_trigger") }'
 
output:
  switch:
    cases:
      - check: this.send_email == "true"
        output:
          smtp:
            serverAddress: smtp-mail.outlook.com
            serverPort: 587
            senderAddress: "test@hotmail.com"     # needs to be the same as user unless the server supports relaying
            recipients: ["test@testa.com"]        # add one or more recipients.
            username: "test@hotmail.com"          # only needed the using TLS/SSL
            password: "password"                  # only needed the using TLS/SSL
            TLS: "STARTTLS"                       # options STARTTLS or SMTPS false if omitted 
            InsecureSkipVerify: false             # false if omitted, only used 
      - output:
          stdout: {} # use for debugging
          
cache_resources:
  - label: trigger
    memory:
      default_ttl: 1h # time the cache is stored
      init_values:
        trigger_set: "false"